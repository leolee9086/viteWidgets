{"version":3,"file":"settings.js","sources":["../../src/plugins/settings/constants.js","../../src/plugins/settings/SettingsButton.js","../../src/data/constants.js","../../src/plugins/settings/SettingsComponent.js","../../src/plugins/settings/index.js"],"sourcesContent":["import { utils } from '../..';\nimport check from './check.svg';\nimport chevron from './chevron.svg';\nimport switchOff from './switch-off.svg';\nimport switchOn from './switch-on.svg';\n\n/**\n * @summary Available events\n * @enum {string}\n * @memberof PSV.plugins.SettingsPlugin\n * @constant\n */\nexport const EVENTS = {\n  /**\n   * @event setting-changed\n   * @memberof PSV.plugins.SettingsPlugin\n   * @summary Triggered when a setting is changed\n   * @param {string} settingId\n   * @param {any} value\n   */\n  SETTING_CHANGED: 'setting-changed',\n};\n\n/**\n * @type {string}\n * @memberof PSV.plugins.SettingsPlugin\n * @constant\n */\nexport const TYPE_OPTIONS = 'options';\n\n/**\n * @type {string}\n * @memberof PSV.plugins.SettingsPlugin\n * @constant\n */\nexport const TYPE_TOGGLE = 'toggle';\n\n/**\n * @summary Key of settings in LocalStorage\n * @type {string}\n * @constant\n * @private\n */\nexport const LOCAL_STORAGE_KEY = 'psvSettings';\n\n/**\n * @summary Panel identifier for settings content\n * @type {string}\n * @constant\n * @private\n */\nexport const ID_PANEL = 'settings';\n\n/**\n * @summary Property name added to settings items\n * @type {string}\n * @constant\n * @private\n */\nexport const SETTING_DATA = 'settingId';\n\n/**\n * @summary Property name added to settings items\n * @type {string}\n * @constant\n * @private\n */\nexport const OPTION_DATA = 'optionId';\n\n/**\n * @summary Identifier of the \"back\" list item\n * @type {string}\n * @constant\n * @private\n */\nexport const ID_BACK = '__back';\n\n/**\n * @summary Identifier of the \"back\" list item\n * @type {string}\n * @constant\n * @private\n */\nexport const ID_ENTER = '__enter';\n\nconst SETTING_DATA_KEY = utils.dasherize(SETTING_DATA);\nconst OPTION_DATA_KEY = utils.dasherize(OPTION_DATA);\n\n/**\n * @summary Setting item template, by type\n * @constant\n * @private\n */\nexport const SETTINGS_TEMPLATE_ = {\n  [TYPE_OPTIONS]: (setting, optionsCurrent) => `\n      <span class=\"psv-settings-item-label\">${setting.label}</span>\n      <span class=\"psv-settings-item-value\">${optionsCurrent(setting)}</span>\n      <span class=\"psv-settings-item-icon\">${chevron}</span>\n    `,\n  [TYPE_TOGGLE] : setting => `\n      <span class=\"psv-settings-item-label\">${setting.label}</span>\n      <span class=\"psv-settings-item-value\">${setting.active() ? switchOn : switchOff}</span>\n    `,\n};\n\n/**\n * @summary Settings list template\n * @param {PSV.plugins.SettingsPlugin.Setting[]} settings\n * @param {function} optionsCurrent\n * @returns {string}\n * @constant\n * @private\n */\nexport const SETTINGS_TEMPLATE = (settings, optionsCurrent) => `\n<ul class=\"psv-settings-list\">\n  ${settings.map(s => `\n    <li class=\"psv-settings-item\" tabindex=\"0\"\n        data-${SETTING_DATA_KEY}=\"${s.id}\" data-${OPTION_DATA_KEY}=\"${ID_ENTER}\">\n      ${SETTINGS_TEMPLATE_[s.type](s, optionsCurrent)}\n    </li>\n  `).join('')}\n</ul>\n`;\n\n/**\n * @summary Settings options template\n * @param {PSV.plugins.SettingsPlugin.OptionsSetting} setting\n * @param {function} optionActive\n * @returns {string}\n * @constant\n * @private\n */\nexport const SETTING_OPTIONS_TEMPLATE = (setting, optionActive) => `\n<ul class=\"psv-settings-list\">\n  <li class=\"psv-settings-item psv-settings-item--header\" tabindex=\"0\"\n      data-${SETTING_DATA_KEY}=\"${setting.id}\" data-${OPTION_DATA_KEY}=\"${ID_BACK}\">\n    <span class=\"psv-settings-item-icon\">${chevron}</span>\n    <span class=\"psv-settings-item-label\">${setting.label}</span>\n  </li>\n  ${setting.options().map(option => `\n    <li class=\"psv-settings-item\" tabindex=\"0\"\n        data-${SETTING_DATA_KEY}=\"${setting.id}\" data-${OPTION_DATA_KEY}=\"${option.id}\">\n      <span class=\"psv-settings-item-icon\">${optionActive(option) ? check : ''}</span>\n      <span class=\"psv-settings-item-value\">${option.label}</span>\n    </li>\n  `).join('')}\n</ul>\n`;\n","import { AbstractButton } from '../..';\nimport icon from './settings.svg';\n\n/**\n * @summary Navigation bar settings button class\n * @extends PSV.buttons.AbstractButton\n * @memberof PSV.buttons\n */\nexport class SettingsButton extends AbstractButton {\n\n  static id = 'settings';\n  static icon = icon;\n\n  /**\n   * @param {PSV.components.Navbar} navbar\n   */\n  constructor(navbar) {\n    super(navbar, 'psv-button--hover-scale psv-settings-button', true);\n\n    /**\n     * @type {PSV.plugins.SettingsPlugin}\n     * @private\n     * @readonly\n     */\n    this.plugin = this.psv.getPlugin('settings');\n\n    /**\n     * @member {HTMLElement}\n     * @private\n     * @readonly\n     */\n    this.badge = document.createElement('div');\n    this.badge.className = 'psv-settings-badge';\n    this.badge.style.display = 'none';\n    this.container.appendChild(this.badge);\n  }\n\n  /**\n   * @override\n   */\n  destroy() {\n    delete this.plugin;\n\n    super.destroy();\n  }\n\n  /**\n   * @override\n   */\n  isSupported() {\n    return !!this.plugin;\n  }\n\n  /**\n   * @override\n   * @description Toggles settings\n   */\n  onClick() {\n    this.plugin.toggleSettings();\n  }\n\n  /**\n   * @summary Changes the badge value\n   * @param {string} value\n   */\n  setBadge(value) {\n    this.badge.innerText = value;\n    this.badge.style.display = value ? '' : 'none';\n  }\n\n}\n","/**\n * @namespace PSV.constants\n */\n\n/**\n * @summary Default duration of the transition between panoramas\n * @memberOf PSV.constants\n * @type {number}\n * @constant\n */\nexport const DEFAULT_TRANSITION = 1500;\n\n/**\n * @summary Number of pixels bellow which a mouse move will be considered as a click\n * @memberOf PSV.constants\n * @type {number}\n * @constant\n */\nexport const MOVE_THRESHOLD = 4;\n\n/**\n * @summary Delay in milliseconds between two clicks to consider a double click\n * @memberOf PSV.constants\n * @type {number}\n * @constant\n */\nexport const DBLCLICK_DELAY = 300;\n\n/**\n * @summary Delay in milliseconds to emulate a long touch\n * @memberOf PSV.constants\n * @type {number}\n * @constant\n */\nexport const LONGTOUCH_DELAY = 500;\n\n/**\n * @summary Delay in milliseconds to for the two fingers overlay to appear\n * @memberOf PSV.constants\n * @type {number}\n * @constant\n */\nexport const TWOFINGERSOVERLAY_DELAY = 100;\n\n/**\n * @summary Duration in milliseconds of the \"ctrl zoom\" overlay\n * @memberOf PSV.constants\n * @type {number}\n * @constant\n */\nexport const CTRLZOOM_TIMEOUT = 2000;\n\n/**\n * @summary Time size of the mouse position history used to compute inertia\n * @memberOf PSV.constants\n * @type {number}\n * @constant\n */\nexport const INERTIA_WINDOW = 300;\n\n/**\n * @summary Radius of the THREE.SphereGeometry, Half-length of the THREE.BoxGeometry\n * @memberOf PSV.constants\n * @type {number}\n * @constant\n */\nexport const SPHERE_RADIUS = 10;\n\n/**\n * @summary Property name added to viewer element\n * @memberOf PSV.constants\n * @type {string}\n * @constant\n */\nexport const VIEWER_DATA = 'photoSphereViewer';\n\n/**\n * @summary Property added the the main Mesh object\n * @memberOf PSV.constants\n * @type {string}\n * @constant\n */\nexport const MESH_USER_DATA = 'psvSphere';\n\n/**\n * @summary Available actions\n * @memberOf PSV.constants\n * @enum {string}\n * @constant\n */\nexport const ACTIONS = {\n  ROTATE_LAT_UP    : 'rotateLatitudeUp',\n  ROTATE_LAT_DOWN  : 'rotateLatitudeDown',\n  ROTATE_LONG_RIGHT: 'rotateLongitudeRight',\n  ROTATE_LONG_LEFT : 'rotateLongitudeLeft',\n  ZOOM_IN          : 'zoomIn',\n  ZOOM_OUT         : 'zoomOut',\n  TOGGLE_AUTOROTATE: 'toggleAutorotate',\n};\n\n/**\n * @summary Available events names\n * @memberOf PSV.constants\n * @enum {string}\n * @constant\n */\nexport const EVENTS = {\n  /**\n   * @event autorotate\n   * @memberof PSV\n   * @summary Triggered when the automatic rotation is enabled/disabled\n   * @param {boolean} enabled\n   */\n  AUTOROTATE        : 'autorotate',\n  /**\n   * @event before-render\n   * @memberof PSV\n   * @summary Triggered before a render, used to modify the view\n   * @param {number} timestamp - time provided by requestAnimationFrame\n   * @param {number} elapsed - time elapsed from the previous frame\n   */\n  BEFORE_RENDER     : 'before-render',\n  /**\n   * @event before-rotate\n   * @memberOf PSV\n   * @summary Triggered before a rotate operation, can be cancelled\n   * @param {PSV.ExtendedPosition}\n   */\n  BEFORE_ROTATE     : 'before-rotate',\n  /**\n   * @event click\n   * @memberof PSV\n   * @summary Triggered when the user clicks on the viewer (everywhere excluding the navbar and the side panel)\n   * @param {PSV.ClickData} data\n   */\n  CLICK             : 'click',\n  /**\n   * @event close-panel\n   * @memberof PSV\n   * @summary Triggered when the panel is closed\n   * @param {string} [id]\n   */\n  CLOSE_PANEL       : 'close-panel',\n  /**\n   * @event config-changed\n   * @memberOf PSV\n   * @summary Triggered after a call to setOption/setOptions\n   * @param {string[]} name of changed options\n   */\n  CONFIG_CHANGED    : 'config-changed',\n  /**\n   * @event dblclick\n   * @memberof PSV\n   * @summary Triggered when the user double clicks on the viewer. The simple `click` event is always fired before `dblclick`\n   * @param {PSV.ClickData} data\n   */\n  DOUBLE_CLICK      : 'dblclick',\n  /**\n   * @event fullscreen-updated\n   * @memberof PSV\n   * @summary Triggered when the fullscreen mode is enabled/disabled\n   * @param {boolean} enabled\n   */\n  FULLSCREEN_UPDATED: 'fullscreen-updated',\n  /**\n   * @event hide-notification\n   * @memberof PSV\n   * @summary Triggered when the notification is hidden\n   * @param {string} [id]\n   */\n  HIDE_NOTIFICATION : 'hide-notification',\n  /**\n   * @event hide-overlay\n   * @memberof PSV\n   * @summary Triggered when the overlay is hidden\n   * @param {string} [id]\n   */\n  HIDE_OVERLAY      : 'hide-overlay',\n  /**\n   * @event hide-tooltip\n   * @memberof PSV\n   * @summary Triggered when the tooltip is hidden\n   * @param {*} Data associated to this tooltip\n   */\n  HIDE_TOOLTIP      : 'hide-tooltip',\n  /**\n   * @event key-press\n   * @memberof PSV\n   * @summary Triggered when a key is pressed, can be cancelled\n   * @param {string} key\n   */\n  KEY_PRESS         : 'key-press',\n  /**\n   * @event load-progress\n   * @memberof PSV\n   * @summary Triggered when the loader value changes\n   * @param {number} value from 0 to 100\n   */\n  LOAD_PROGRESS     : 'load-progress',\n  /**\n   * @event open-panel\n   * @memberof PSV\n   * @summary Triggered when the panel is opened\n   * @param {string} [id]\n   */\n  OPEN_PANEL        : 'open-panel',\n  /**\n   * @event panorama-loaded\n   * @memberof PSV\n   * @summary Triggered when a panorama image has been loaded\n   * @param {PSV.TextureData} textureData\n   */\n  PANORAMA_LOADED   : 'panorama-loaded',\n  /**\n   * @event position-updated\n   * @memberof PSV\n   * @summary Triggered when the view longitude and/or latitude changes\n   * @param {PSV.Position} position\n   */\n  POSITION_UPDATED  : 'position-updated',\n  /**\n   * @event ready\n   * @memberof PSV\n   * @summary Triggered when the panorama image has been loaded and the viewer is ready to perform the first render\n   */\n  READY             : 'ready',\n  /**\n   * @event render\n   * @memberof PSV\n   * @summary Triggered on each viewer render, **this event is triggered very often**\n   */\n  RENDER            : 'render',\n  /**\n   * @event show-notification\n   * @memberof PSV\n   * @summary Triggered when the notification is shown\n   * @param {string} [id]\n   */\n  SHOW_NOTIFICATION : 'show-notification',\n  /**\n   * @event show-overlay\n   * @memberof PSV\n   * @summary Triggered when the overlay is shown\n   * @param {string} [id]\n   */\n  SHOW_OVERLAY      : 'show-overlay',\n  /**\n   * @event show-tooltip\n   * @memberof PSV\n   * @summary Triggered when the tooltip is shown\n   * @param {*} Data associated to this tooltip\n   * @param {PSV.components.Tooltip} Instance of the tooltip\n   */\n  SHOW_TOOLTIP      : 'show-tooltip',\n  /**\n   * @event size-updated\n   * @memberof PSV\n   * @summary Triggered when the viewer size changes\n   * @param {PSV.Size} size\n   */\n  SIZE_UPDATED      : 'size-updated',\n  /**\n   * @event stop-all\n   * @memberof PSV\n   * @summary Triggered when all current animations are stopped\n   */\n  STOP_ALL          : 'stop-all',\n  /**\n   * @event zoom-updated\n   * @memberof PSV\n   * @summary Triggered when the zoom level changes\n   * @param {number} zoomLevel\n   */\n  ZOOM_UPDATED      : 'zoom-updated',\n};\n\n/**\n * @summary Available change events names\n * @memberOf PSV.constants\n * @enum {string}\n * @constant\n */\nexport const CHANGE_EVENTS = {\n  /**\n   * @event get-animate-position\n   * @memberof PSV\n   * @param {Position} position\n   * @returns {Position}\n   * @summary Called to alter the target position of an animation\n   */\n  GET_ANIMATE_POSITION: 'get-animate-position',\n  /**\n   * @event get-rotate-position\n   * @memberof PSV\n   * @param {Position} position\n   * @returns {Position}\n   * @summary Called to alter the target position of a rotation\n   */\n  GET_ROTATE_POSITION : 'get-rotate-position',\n};\n\n/**\n * @summary Special events emitted to listener using {@link Viewer#observeObjects}\n * @memberOf PSV.constants\n * @constant\n * @package\n */\nexport const OBJECT_EVENTS = {\n  ENTER_OBJECT: 'enter-object',\n  HOVER_OBJECT: 'hover-object',\n  LEAVE_OBJECT: 'leave-object',\n};\n\n/**\n * @summary Internal identifiers for various stuff\n * @memberOf PSV.constants\n * @enum {string}\n * @constant\n */\nexport const IDS = {\n  MENU       : 'menu',\n  TWO_FINGERS: 'twoFingers',\n  CTRL_ZOOM  : 'ctrlZoom',\n  ERROR      : 'error',\n  DESCRIPTION: 'description',\n};\n\n/* eslint-disable */\n// @formatter:off\n/**\n * @summary Collection of easing functions\n * @memberOf PSV.constants\n * @see {@link https://gist.github.com/frederickk/6165768}\n * @type {Object<string, Function>}\n * @constant\n */\nexport const EASINGS = {\n  linear    : (t) => t,\n\n  inQuad    : (t) => t*t,\n  outQuad   : (t) => t*(2-t),\n  inOutQuad : (t) => t<.5 ? 2*t*t : -1+(4-2*t)*t,\n\n  inCubic   : (t) => t*t*t,\n  outCubic  : (t) => (--t)*t*t+1,\n  inOutCubic: (t) => t<.5 ? 4*t*t*t : (t-1)*(2*t-2)*(2*t-2)+1,\n\n  inQuart   : (t) => t*t*t*t,\n  outQuart  : (t) => 1-(--t)*t*t*t,\n  inOutQuart: (t) => t<.5 ? 8*t*t*t*t : 1-8*(--t)*t*t*t,\n\n  inQuint   : (t) => t*t*t*t*t,\n  outQuint  : (t) => 1+(--t)*t*t*t*t,\n  inOutQuint: (t) => t<.5 ? 16*t*t*t*t*t : 1+16*(--t)*t*t*t*t,\n\n  inSine    : (t) => 1-Math.cos(t*(Math.PI/2)),\n  outSine   : (t) => Math.sin(t*(Math.PI/2)),\n  inOutSine : (t) => .5-.5*Math.cos(Math.PI*t),\n\n  inExpo    : (t) => Math.pow(2, 10*(t-1)),\n  outExpo   : (t) => 1-Math.pow(2, -10*t),\n  inOutExpo : (t) => (t=t*2-1)<0 ? .5*Math.pow(2, 10*t) : 1-.5*Math.pow(2, -10*t),\n\n  inCirc    : (t) => 1-Math.sqrt(1-t*t),\n  outCirc   : (t) => Math.sqrt(1-(t-1)*(t-1)),\n  inOutCirc : (t) => (t*=2)<1 ? .5-.5*Math.sqrt(1-t*t) : .5+.5*Math.sqrt(1-(t-=2)*t)\n};\n// @formatter:on\n/* eslint-enable */\n\n/**\n * @summary Subset of key codes\n * @memberOf PSV.constants\n * @type {Object<string, string>}\n * @constant\n */\nexport const KEY_CODES = {\n  Enter     : 'Enter',\n  Control   : 'Control',\n  Escape    : 'Escape',\n  Space     : ' ',\n  PageUp    : 'PageUp',\n  PageDown  : 'PageDown',\n  ArrowLeft : 'ArrowLeft',\n  ArrowUp   : 'ArrowUp',\n  ArrowRight: 'ArrowRight',\n  ArrowDown : 'ArrowDown',\n  Delete    : 'Delete',\n  Plus      : '+',\n  Minus     : '-',\n};\n","import { AbstractComponent, utils } from '../..';\nimport { EVENTS, KEY_CODES } from '../../data/constants';\nimport {\n  ID_BACK,\n  ID_ENTER,\n  OPTION_DATA,\n  SETTING_DATA,\n  SETTING_OPTIONS_TEMPLATE,\n  SETTINGS_TEMPLATE,\n  TYPE_OPTIONS,\n  TYPE_TOGGLE\n} from './constants';\n\n/**\n * @private\n */\nexport class SettingsComponent extends AbstractComponent {\n\n  constructor(plugin) {\n    super(plugin.psv, 'psv-settings psv--capture-event');\n\n    /**\n     * @type {PSV.plugins.SettingsPlugin}\n     * @private\n     * @readonly\n     */\n    this.plugin = plugin;\n\n    /**\n     * @type {Object}\n     * @private\n     */\n    this.prop = {\n      ...this.prop,\n    };\n\n    this.container.addEventListener('click', this);\n    this.container.addEventListener('transitionend', this);\n    this.container.addEventListener('keydown', this);\n\n    this.hide();\n  }\n\n  /**\n   * @override\n   */\n  destroy() {\n    delete this.plugin;\n\n    super.destroy();\n  }\n\n  /**\n   * @private\n   */\n  handleEvent(e) {\n    /* eslint-disable */\n    switch (e.type) {\n      case 'click':\n        this.__click(e.target);\n        break;\n\n      case 'transitionend':\n        if (!this.isVisible()) {\n          this.container.innerHTML = ''; // empty content after fade out\n        }\n        else {\n          this.__focusFirstOption();\n        }\n        break;\n\n      case 'keydown':\n        if (this.isVisible()) {\n          switch (e.key) {\n            case KEY_CODES.Escape:\n              this.plugin.hideSettings();\n              break;\n            case KEY_CODES.Enter:\n              this.__click(e.target);\n              break;\n          }\n        }\n        break;\n\n      case EVENTS.KEY_PRESS:\n        if (this.isVisible() && e.args[0] === KEY_CODES.Escape) {\n          this.plugin.hideSettings();\n          e.preventDefault();\n        }\n        break;\n    }\n    /* eslint-enable */\n  }\n\n  /**\n   * @override\n   */\n  show() {\n    this.__showSettings(false);\n\n    this.container.classList.add('psv-settings--open');\n    this.prop.visible = true;\n  }\n\n  /**\n   * @override\n   */\n  hide() {\n    this.container.classList.remove('psv-settings--open');\n    this.prop.visible = false;\n  }\n\n  /**\n   * @summary Handle clicks on items\n   * @param {HTMLElement} element\n   * @private\n   */\n  __click(element) {\n    const li = utils.getClosest(element, 'li');\n    if (!li) {\n      return;\n    }\n\n    const settingId = li.dataset[SETTING_DATA];\n    const optionId = li.dataset[OPTION_DATA];\n\n    const setting = this.plugin.settings.find(s => s.id === settingId);\n\n    switch (optionId) {\n      case ID_BACK:\n        this.__showSettings(true);\n        break;\n\n      case ID_ENTER:\n        switch (setting.type) {\n          case TYPE_TOGGLE:\n            this.plugin.toggleSettingValue(setting);\n            this.__showSettings(true); // re-render\n            break;\n\n          case TYPE_OPTIONS:\n            this.__showOptions(setting);\n            break;\n\n          default:\n          // noop\n        }\n        break;\n\n      default:\n        switch (setting.type) {\n          case TYPE_OPTIONS:\n            this.hide();\n            this.plugin.applySettingOption(setting, optionId);\n            break;\n\n          default:\n          // noop\n        }\n        break;\n    }\n  }\n\n  /**\n   * @summary Shows the list of options\n   * @private\n   */\n  __showSettings(focus) {\n    this.container.innerHTML = SETTINGS_TEMPLATE(\n      this.plugin.settings,\n      (setting) => {\n        const current = setting.current();\n        const option = setting.options()\n          .find(opt => opt.id === current);\n        return option?.label;\n      }\n    );\n\n    // must not focus during the initial transition\n    if (focus) {\n      this.__focusFirstOption();\n    }\n  }\n\n  /**\n   * @summary Shows setting options panel\n   * @param {PSV.plugins.SettingsPlugin.OptionsSetting} setting\n   * @private\n   */\n  __showOptions(setting) {\n    const current = setting.current();\n\n    this.container.innerHTML = SETTING_OPTIONS_TEMPLATE(\n      setting,\n      (option) => {\n        return option.id === current;\n      }\n    );\n\n    this.__focusFirstOption();\n  }\n\n  __focusFirstOption() {\n    this.container.querySelector('[tabindex]')?.focus();\n  }\n\n}\n","import { AbstractPlugin, CONSTANTS, DEFAULTS, PSVError, registerButton, utils } from '../..';\nimport { EVENTS, LOCAL_STORAGE_KEY, SETTINGS_TEMPLATE_, TYPE_OPTIONS, TYPE_TOGGLE } from './constants';\nimport { SettingsButton } from './SettingsButton';\nimport { SettingsComponent } from './SettingsComponent';\nimport './style.scss';\n\n\n/**\n * @typedef {Object} PSV.plugins.SettingsPlugin.Setting\n * @summary Description of a setting\n * @property {string} id - identifier of the setting\n * @property {string} label - label of the setting\n * @property {'options' | 'toggle'} type - type of the setting\n * @property {function} [badge] - function which returns the value of the button badge\n */\n\n/**\n * @typedef {PSV.plugins.SettingsPlugin.Setting} PSV.plugins.SettingsPlugin.OptionsSetting\n * @summary Description of a 'options' setting\n * @property {'options'} type - type of the setting\n * @property {function} current - function which returns the current option id\n * @property {function} options - function which the possible options as an array of {@link PSV.plugins.SettingsPlugin.Option}\n * @property {function} apply - function called with the id of the selected option\n */\n\n/**\n * @typedef {PSV.plugins.SettingsPlugin.Setting} PSV.plugins.SettingsPlugin.ToggleSetting\n * @summary Description of a 'toggle' setting\n * @property {'toggle'} type - type of the setting\n * @property {function} active - function which return whereas the setting is active or not\n * @property {function} toggle - function called when the setting is toggled\n */\n\n/**\n * @typedef {Object} PSV.plugins.SettingsPlugin.Option\n * @summary Option of an 'option' setting\n * @property {string} id - identifier of the option\n * @property {string} label - label of the option\n */\n\n/**\n * @typedef {Object} PSV.plugins.SettingsPlugin.Options\n * @property {boolean} [persist=false] - should the settings be saved accross sessions\n * @property {Object} [storage] - custom storage handler, defaults to LocalStorage\n * @property {PSV.plugins.SettingsPlugin.StorageGetter} [storage.get]\n * @property {PSV.plugins.SettingsPlugin.StorageSetter} [storage.set]\n */\n\n/**\n * @callback StorageGetter\n * @memberOf PSV.plugins.SettingsPlugin\n * @param {string} settingId\n * @return {boolean | string | Promise<boolean | string>} - return `undefined` or `null` if the option does not exist\n */\n\n/**\n * @callback StorageSetter\n * @memberOf PSV.plugins.SettingsPlugin\n * @param {string} settingId\n * @param {boolean | string} value\n */\n\n\n// add settings button\nDEFAULTS.lang[SettingsButton.id] = 'Settings';\nregisterButton(SettingsButton, 'fullscreen:left');\n\n\nfunction getData() {\n  return JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY)) || {};\n}\n\nfunction setData(data) {\n  localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(data));\n}\n\n\nexport { EVENTS, TYPE_TOGGLE, TYPE_OPTIONS } from './constants';\n\n\n/**\n * @summary Adds a button to access various settings.\n * @extends PSV.plugins.AbstractPlugin\n * @memberof PSV.plugins\n */\nexport class SettingsPlugin extends AbstractPlugin {\n\n  static id = 'settings';\n\n  static EVENTS = EVENTS;\n  static TYPE_TOGGLE = TYPE_TOGGLE;\n  static TYPE_OPTIONS = TYPE_OPTIONS;\n\n  /**\n   * @param {PSV.Viewer} psv\n   * @param {PSV.plugins.SettingsPlugin.Options} options\n   */\n  constructor(psv, options) {\n    super(psv);\n\n    /**\n     * @type {PSV.plugins.SettingsPlugin.Options}\n     */\n    this.config = {\n      persist: false,\n      storage: {\n        get(id) {\n          return getData()[id];\n        },\n        set(id, value) {\n          const data = getData();\n          data[id] = value;\n          setData(data);\n        },\n      },\n      ...options,\n    };\n\n    /**\n     * @type {SettingsComponent}\n     * @private\n     * @readonly\n     */\n    this.component = new SettingsComponent(this);\n\n    /**\n     * @type {PSV.plugins.SettingsPlugin.Setting[]}\n     * @private\n     */\n    this.settings = [];\n  }\n\n  /**\n   * @package\n   */\n  init() {\n    super.init();\n\n    this.psv.on(CONSTANTS.EVENTS.CLICK, this);\n    this.psv.on(CONSTANTS.EVENTS.OPEN_PANEL, this);\n\n    // buttons are initialized just after plugins\n    setTimeout(() => this.updateButton());\n  }\n\n  /**\n   * @package\n   */\n  destroy() {\n    this.psv.off(CONSTANTS.EVENTS.CLICK, this);\n    this.psv.off(CONSTANTS.EVENTS.OPEN_PANEL, this);\n\n    this.component.destroy();\n\n    delete this.component;\n    this.settings.length = 0;\n\n    super.destroy();\n  }\n\n  /**\n   * @private\n   */\n  handleEvent(e) {\n    /* eslint-disable */\n    switch (e.type) {\n      case CONSTANTS.EVENTS.CLICK:\n      case CONSTANTS.EVENTS.OPEN_PANEL:\n        if (this.component.isVisible()) {\n          this.hideSettings();\n        }\n        break;\n    }\n    /* eslint-enable */\n  }\n\n  /**\n   * @summary Registers a new setting\n   * @param {PSV.plugins.SettingsPlugin.Setting} setting\n   */\n  addSetting(setting) {\n    if (!setting.id) {\n      throw new PSVError('Missing setting id');\n    }\n    if (!setting.type) {\n      throw new PSVError('Missing setting type');\n    }\n    if (!SETTINGS_TEMPLATE_[setting.type]) {\n      throw new PSVError('Unsupported setting type');\n    }\n\n    if (setting.badge && this.settings.some(s => s.badge)) {\n      utils.logWarn('More than one setting with a badge are declared, the result is unpredictable.');\n    }\n\n    this.settings.push(setting);\n\n    if (this.component.isVisible()) {\n      this.component.show(); // re-render\n    }\n\n    this.updateButton();\n\n    if (this.config.persist) {\n      Promise.resolve(this.config.storage.get(setting.id))\n        .then((value) => {\n          switch (setting.type) {\n            case TYPE_TOGGLE:\n              if (!utils.isNil(value) && value !== setting.active()) {\n                setting.toggle();\n                this.trigger(EVENTS.SETTING_CHANGED, setting.id, setting.active());\n              }\n              break;\n\n            case TYPE_OPTIONS:\n              if (!utils.isNil(value) && value !== setting.current()) {\n                setting.apply(value);\n                this.trigger(EVENTS.SETTING_CHANGED, setting.id, setting.current());\n              }\n              break;\n\n            default:\n            // noop\n          }\n\n          this.updateButton();\n        });\n    }\n  }\n\n  /**\n   * @summary Removes a setting\n   * @param {string} id\n   */\n  removeSetting(id) {\n    const idx = this.settings.findIndex(setting => setting.id === id);\n    if (idx !== -1) {\n      this.settings.splice(idx, 1);\n\n      if (this.component.isVisible()) {\n        this.component.show(); // re-render\n      }\n\n      this.updateButton();\n    }\n  }\n\n  /**\n   * @summary Toggles the settings menu\n   */\n  toggleSettings() {\n    this.component.toggle();\n    this.updateButton();\n  }\n\n  /**\n   * @summary Hides the settings menu\n   */\n  hideSettings() {\n    this.component.hide();\n    this.updateButton();\n  }\n\n  /**\n   * @summary Shows the settings menu\n   */\n  showSettings() {\n    this.component.show();\n    this.updateButton();\n  }\n\n  /**\n   * @summary Updates the badge in the button\n   */\n  updateButton() {\n    const value = this.settings.find(s => s.badge)?.badge();\n    const button = this.psv.navbar.getButton(SettingsButton.id, false);\n    button?.toggleActive(this.component.isVisible());\n    button?.setBadge(value);\n  }\n\n  /**\n   * @summary Toggles a setting\n   * @param {PSV.plugins.SettingsPlugin.ToggleSetting} setting\n   * @package\n   */\n  toggleSettingValue(setting) {\n    const newValue = !setting.active(); // in case \"toggle\" is async\n\n    setting.toggle();\n\n    this.trigger(EVENTS.SETTING_CHANGED, setting.id, newValue);\n\n    if (this.config.persist) {\n      this.config.storage.set(setting.id, newValue);\n    }\n\n    this.updateButton();\n  }\n\n  /**\n   * @summary Changes the value of an setting\n   * @param {PSV.plugins.SettingsPlugin.OptionsSetting} setting\n   * @param {string} optionId\n   * @package\n   */\n  applySettingOption(setting, optionId) {\n    setting.apply(optionId);\n\n    this.trigger(EVENTS.SETTING_CHANGED, setting.id, optionId);\n\n    if (this.config.persist) {\n      this.config.storage.set(setting.id, optionId);\n    }\n\n    this.updateButton();\n  }\n\n}\n"],"names":["EVENTS","SETTING_CHANGED","TYPE_OPTIONS","TYPE_TOGGLE","LOCAL_STORAGE_KEY","SETTING_DATA","OPTION_DATA","ID_BACK","ID_ENTER","SETTING_DATA_KEY","utils","dasherize","OPTION_DATA_KEY","SETTINGS_TEMPLATE_","setting","optionsCurrent","label","chevron","active","switchOn","switchOff","SETTINGS_TEMPLATE","settings","map","s","id","type","join","SETTING_OPTIONS_TEMPLATE","optionActive","options","option","check","SettingsButton","navbar","plugin","psv","getPlugin","badge","document","createElement","className","style","display","container","appendChild","destroy","isSupported","onClick","toggleSettings","setBadge","value","innerText","AbstractButton","icon","AUTOROTATE","BEFORE_RENDER","BEFORE_ROTATE","CLICK","CLOSE_PANEL","CONFIG_CHANGED","DOUBLE_CLICK","FULLSCREEN_UPDATED","HIDE_NOTIFICATION","HIDE_OVERLAY","HIDE_TOOLTIP","KEY_PRESS","LOAD_PROGRESS","OPEN_PANEL","PANORAMA_LOADED","POSITION_UPDATED","READY","RENDER","SHOW_NOTIFICATION","SHOW_OVERLAY","SHOW_TOOLTIP","SIZE_UPDATED","STOP_ALL","ZOOM_UPDATED","KEY_CODES","Enter","Control","Escape","Space","PageUp","PageDown","ArrowLeft","ArrowUp","ArrowRight","ArrowDown","Delete","Plus","Minus","SettingsComponent","prop","addEventListener","hide","handleEvent","e","__click","target","isVisible","innerHTML","__focusFirstOption","key","hideSettings","args","preventDefault","show","__showSettings","classList","add","visible","remove","element","li","getClosest","settingId","dataset","optionId","find","toggleSettingValue","__showOptions","applySettingOption","focus","current","opt","querySelector","AbstractComponent","DEFAULTS","lang","registerButton","getData","JSON","parse","localStorage","getItem","setData","data","setItem","stringify","SettingsPlugin","config","persist","storage","get","set","component","init","on","CONSTANTS","setTimeout","updateButton","off","length","addSetting","PSVError","some","logWarn","push","Promise","resolve","then","isNil","toggle","trigger","apply","removeSetting","idx","findIndex","splice","showSettings","button","getButton","toggleActive","newValue","AbstractPlugin"],"mappings":"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"}