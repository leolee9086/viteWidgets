{"version":3,"file":"visible-range.js","sources":["../../src/plugins/visible-range/index.js"],"sourcesContent":["import { MathUtils } from 'three';\nimport { AbstractPlugin, CONSTANTS, utils } from '../..';\n\n\n/**\n * @typedef {Object} PSV.plugins.VisibleRangePlugin.Options\n * @property {double[]|string[]} [latitudeRange] - latitude range as two angles\n * @property {double[]|string[]} [longitudeRange] - longitude range as two angles\n * @property {boolean} [usePanoData=false] - use panoData as visible range, you can also manually call `setRangesFromPanoData`\n */\n\nconst EPS = 0.000001;\n\n/**\n * @summary Locks visible longitude and/or latitude\n * @extends PSV.plugins.AbstractPlugin\n * @memberof PSV.plugins\n */\nexport class VisibleRangePlugin extends AbstractPlugin {\n\n  static id = 'visible-range';\n\n  /**\n   * @param {PSV.Viewer} psv\n   * @param {PSV.plugins.VisibleRangePlugin.Options} options\n   */\n  constructor(psv, options) {\n    super(psv);\n\n    /**\n     * @member {PSV.plugins.VisibleRangePlugin.Options}\n     * @private\n     */\n    this.config = {\n      latitudeRange : null,\n      longitudeRange: null,\n      usePanoData   : false,\n      ...options,\n    };\n  }\n\n  /**\n   * @package\n   */\n  init() {\n    super.init();\n\n    this.psv.on(CONSTANTS.EVENTS.PANORAMA_LOADED, this);\n    this.psv.on(CONSTANTS.EVENTS.POSITION_UPDATED, this);\n    this.psv.on(CONSTANTS.EVENTS.ZOOM_UPDATED, this);\n    this.psv.on(CONSTANTS.CHANGE_EVENTS.GET_ANIMATE_POSITION, this);\n    this.psv.on(CONSTANTS.CHANGE_EVENTS.GET_ROTATE_POSITION, this);\n\n    this.setLatitudeRange(this.config.latitudeRange);\n    this.setLongitudeRange(this.config.longitudeRange);\n  }\n\n  /**\n   * @package\n   */\n  destroy() {\n    this.psv.off(CONSTANTS.EVENTS.PANORAMA_LOADED, this);\n    this.psv.off(CONSTANTS.EVENTS.POSITION_UPDATED, this);\n    this.psv.off(CONSTANTS.EVENTS.ZOOM_UPDATED, this);\n    this.psv.off(CONSTANTS.CHANGE_EVENTS.GET_ANIMATE_POSITION, this);\n    this.psv.off(CONSTANTS.CHANGE_EVENTS.GET_ROTATE_POSITION, this);\n\n    super.destroy();\n  }\n\n  /**\n   * @private\n   */\n  // eslint-disable-next-line consistent-return\n  handleEvent(e) {\n    let sidesReached;\n    let rangedPosition;\n    let currentPosition;\n\n    switch (e.type) {\n      case CONSTANTS.CHANGE_EVENTS.GET_ANIMATE_POSITION:\n      case CONSTANTS.CHANGE_EVENTS.GET_ROTATE_POSITION:\n        currentPosition = e.value;\n        ({ rangedPosition } = this.applyRanges(currentPosition));\n\n        return rangedPosition;\n\n      case CONSTANTS.EVENTS.POSITION_UPDATED:\n        currentPosition = e.args[0];\n        ({ sidesReached, rangedPosition } = this.applyRanges(currentPosition));\n\n        if ((sidesReached.left || sidesReached.right) && this.psv.isAutorotateEnabled()) {\n          this.__reverseAutorotate(sidesReached.left, sidesReached.right);\n        }\n        else if (Math.abs(currentPosition.longitude - rangedPosition.longitude) > EPS\n          || Math.abs(currentPosition.latitude - rangedPosition.latitude) > EPS) {\n          this.psv.dynamics.position.setValue(rangedPosition);\n        }\n        break;\n\n      case CONSTANTS.EVENTS.PANORAMA_LOADED:\n        if (this.config.usePanoData) {\n          this.setRangesFromPanoData();\n        }\n        break;\n\n      case CONSTANTS.EVENTS.ZOOM_UPDATED:\n        currentPosition = this.psv.getPosition();\n        ({ rangedPosition } = this.applyRanges(currentPosition));\n\n        if (Math.abs(currentPosition.longitude - rangedPosition.longitude) > EPS\n          || Math.abs(currentPosition.latitude - rangedPosition.latitude) > EPS) {\n          this.psv.rotate(rangedPosition);\n        }\n        break;\n\n      default:\n    }\n  }\n\n  /**\n   * @summary Changes the latitude range\n   * @param {double[]|string[]} range - latitude range as two angles\n   */\n  setLatitudeRange(range) {\n    // latitude range must have two values\n    if (range && range.length !== 2) {\n      utils.logWarn('latitude range must have exactly two elements');\n      range = null;\n    }\n    // latitude range must be ordered\n    else if (range && range[0] > range[1]) {\n      utils.logWarn('latitude range values must be ordered');\n      range = [range[1], range[0]];\n    }\n    // latitude range is between -PI/2 and PI/2\n    if (range) {\n      this.config.latitudeRange = range.map(angle => utils.parseAngle(angle, true));\n    }\n    else {\n      this.config.latitudeRange = null;\n    }\n\n    if (this.psv.prop.ready) {\n      this.psv.rotate(this.psv.getPosition());\n    }\n  }\n\n  /**\n   * @summary Changes the longitude range\n   * @param {double[]|string[]} range - longitude range as two angles\n   */\n  setLongitudeRange(range) {\n    // longitude range must have two values\n    if (range && range.length !== 2) {\n      utils.logWarn('longitude range must have exactly two elements');\n      range = null;\n    }\n    // longitude range is between 0 and 2*PI\n    if (range) {\n      this.config.longitudeRange = range.map(angle => utils.parseAngle(angle));\n    }\n    else {\n      this.config.longitudeRange = null;\n    }\n\n    if (this.psv.prop.ready) {\n      this.psv.rotate(this.psv.getPosition());\n    }\n  }\n\n  /**\n   * @summary Changes the latitude and longitude ranges according the current panorama cropping data\n   */\n  setRangesFromPanoData() {\n    this.setLatitudeRange(this.getPanoLatitudeRange());\n    this.setLongitudeRange(this.getPanoLongitudeRange());\n  }\n\n  /**\n   * @summary Gets the latitude range defined by the viewer's panoData\n   * @returns {double[]|null}\n   * @private\n   */\n  getPanoLatitudeRange() {\n    const p = this.psv.prop.panoData;\n    if (p.croppedHeight === p.fullHeight) {\n      return null;\n    }\n    else {\n      const latitude = y => Math.PI * (1 - y / p.fullHeight) - (Math.PI / 2);\n      return [latitude(p.croppedY + p.croppedHeight), latitude(p.croppedY)];\n    }\n  }\n\n  /**\n   * @summary Gets the longitude range defined by the viewer's panoData\n   * @returns {double[]|null}\n   * @private\n   */\n  getPanoLongitudeRange() {\n    const p = this.psv.prop.panoData;\n    if (p.croppedWidth === p.fullWidth) {\n      return null;\n    }\n    else {\n      const longitude = x => 2 * Math.PI * (x / p.fullWidth) - Math.PI;\n      return [longitude(p.croppedX), longitude(p.croppedX + p.croppedWidth)];\n    }\n  }\n\n  /**\n   * @summary Apply \"longitudeRange\" and \"latitudeRange\"\n   * @param {PSV.Position} position\n   * @returns {{rangedPosition: PSV.Position, sidesReached: string[]}}\n   * @private\n   */\n  applyRanges(position) {\n    const rangedPosition = {\n      longitude: position.longitude,\n      latitude : position.latitude,\n    };\n    const sidesReached = {};\n\n    let range;\n    let offset;\n\n    if (this.config.longitudeRange) {\n      range = utils.clone(this.config.longitudeRange);\n      offset = MathUtils.degToRad(this.psv.prop.hFov) / 2;\n\n      range[0] = utils.parseAngle(range[0] + offset);\n      range[1] = utils.parseAngle(range[1] - offset);\n\n      if (range[0] > range[1]) { // when the range cross longitude 0\n        if (position.longitude > range[1] && position.longitude < range[0]) {\n          if (position.longitude > (range[0] / 2 + range[1] / 2)) { // detect which side we are closer too\n            rangedPosition.longitude = range[0];\n            sidesReached.left = true;\n          }\n          else {\n            rangedPosition.longitude = range[1];\n            sidesReached.right = true;\n          }\n        }\n      }\n      else if (position.longitude < range[0]) {\n        rangedPosition.longitude = range[0];\n        sidesReached.left = true;\n      }\n      else if (position.longitude > range[1]) {\n        rangedPosition.longitude = range[1];\n        sidesReached.right = true;\n      }\n    }\n\n    if (this.config.latitudeRange) {\n      range = utils.clone(this.config.latitudeRange);\n      offset = MathUtils.degToRad(this.psv.prop.vFov) / 2;\n\n      range[0] = utils.parseAngle(range[0] + offset, true);\n      range[1] = utils.parseAngle(range[1] - offset, true);\n\n      // for very a narrow images, lock the latitude to the center\n      if (range[0] > range[1]) {\n        range[0] = (range[0] + range[1]) / 2;\n        range[1] = range[0];\n      }\n\n      if (position.latitude < range[0]) {\n        rangedPosition.latitude = range[0];\n        sidesReached.bottom = true;\n      }\n      else if (position.latitude > range[1]) {\n        rangedPosition.latitude = range[1];\n        sidesReached.top = true;\n      }\n    }\n\n    return { rangedPosition, sidesReached };\n  }\n\n  /**\n   * @summary Reverses autorotate direction with smooth transition\n   * @private\n   */\n  __reverseAutorotate(left, right) {\n    // reverse already ongoing\n    if (left && this.psv.config.autorotateSpeed > 0 || right && this.psv.config.autorotateSpeed < 0) {\n      return;\n    }\n\n    this.psv.config.autorotateSpeed = -this.psv.config.autorotateSpeed;\n    this.psv.startAutorotate(true);\n  }\n\n}\n"],"names":["EPS","VisibleRangePlugin","psv","options","config","latitudeRange","longitudeRange","usePanoData","init","on","CONSTANTS","EVENTS","PANORAMA_LOADED","POSITION_UPDATED","ZOOM_UPDATED","CHANGE_EVENTS","GET_ANIMATE_POSITION","GET_ROTATE_POSITION","setLatitudeRange","setLongitudeRange","destroy","off","handleEvent","e","sidesReached","rangedPosition","currentPosition","type","value","applyRanges","args","left","right","isAutorotateEnabled","__reverseAutorotate","Math","abs","longitude","latitude","dynamics","position","setValue","setRangesFromPanoData","getPosition","rotate","range","length","utils","logWarn","map","angle","parseAngle","prop","ready","getPanoLatitudeRange","getPanoLongitudeRange","p","panoData","croppedHeight","fullHeight","y","PI","croppedY","croppedWidth","fullWidth","x","croppedX","offset","clone","MathUtils","degToRad","hFov","vFov","bottom","top","autorotateSpeed","startAutorotate","AbstractPlugin","id"],"mappings":"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"}