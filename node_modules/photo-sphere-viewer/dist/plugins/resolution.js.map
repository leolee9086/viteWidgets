{"version":3,"file":"resolution.js","sources":["../../src/plugins/resolution/constants.js","../../src/plugins/resolution/index.js"],"sourcesContent":["/**\n * @summary Available events\n * @enum {string}\n * @memberof PSV.plugins.ResolutionPlugin\n * @constant\n */\nexport const EVENTS = {\n  /**\n   * @event resolution-changed\n   * @memberof PSV.plugins.ResolutionPlugin\n   * @summary Triggered when the resolution is changed\n   * @param {string} resolutionId\n   */\n  RESOLUTION_CHANGED: 'resolution-changed',\n};\n","import { AbstractPlugin, CONSTANTS, DEFAULTS, PSVError, utils } from '../..';\nimport { EVENTS } from './constants';\n\n\n/**\n * @typedef {Object} PSV.plugins.ResolutionPlugin.Resolution\n * @property {string} id\n * @property {string} label\n * @property {*} panorama\n */\n\n/**\n * @typedef {Object} PSV.plugins.ResolutionPlugin.Options\n * @property {PSV.plugins.ResolutionPlugin.Resolution[]} resolutions - list of available resolutions\n * @property {string} [defaultResolution] - the default resolution if no panorama is configured on the viewer\n * @property {boolean} [showBadge=true] - show the resolution id as a badge on the settings button\n */\n\n\nDEFAULTS.lang.resolution = 'Quality';\n\n\nexport { EVENTS } from './constants';\n\n\n/**\n * @summary Adds a setting to choose between multiple resolutions of the panorama.\n * @extends PSV.plugins.AbstractPlugin\n * @memberof PSV.plugins\n */\nexport class ResolutionPlugin extends AbstractPlugin {\n\n  static id = 'resolution';\n\n  static EVENTS = EVENTS;\n\n  /**\n   * @param {PSV.Viewer} psv\n   * @param {PSV.plugins.ResolutionPlugin.Options} options\n   */\n  constructor(psv, options) {\n    super(psv);\n\n    /**\n     * @type {PSV.plugins.SettingsPlugin}\n     * @readonly\n     * @private\n     */\n    this.settings = null;\n\n    /**\n     * @summary Available resolutions\n     * @member {PSV.plugins.ResolutionPlugin.Resolution[]}\n     */\n    this.resolutions = [];\n\n    /**\n     * @summary Available resolutions\n     * @member {Object.<string, PSV.plugins.ResolutionPlugin.Resolution>}\n     * @private\n     */\n    this.resolutionsById = {};\n\n    /**\n     * @type {Object}\n     * @property {string} resolution - Current resolution\n     * @private\n     */\n    this.prop = {\n      resolution: null,\n    };\n\n    /**\n     * @type {PSV.plugins.ResolutionPlugin.Options}\n     */\n    this.config = {\n      showBadge: true,\n      ...options,\n    };\n\n    if (this.config.defaultResolution && this.psv.config.panorama) {\n      utils.logWarn('ResolutionPlugin, a defaultResolution was provided '\n        + 'but a panorama is already configured on the viewer, '\n        + 'the defaultResolution will be ignored.');\n    }\n  }\n\n  /**\n   * @package\n   */\n  init() {\n    super.init();\n\n    this.settings = this.psv.getPlugin('settings');\n\n    if (!this.settings) {\n      throw new PSVError('Resolution plugin requires the Settings plugin');\n    }\n\n    this.settings.addSetting({\n      id     : ResolutionPlugin.id,\n      type   : 'options',\n      label  : this.psv.config.lang.resolution,\n      current: () => this.prop.resolution,\n      options: () => this.__getSettingsOptions(),\n      apply  : resolution => this.__setResolutionIfExists(resolution),\n      badge  : !this.config.showBadge ? null : () => this.prop.resolution,\n    });\n\n    this.psv.on(CONSTANTS.EVENTS.PANORAMA_LOADED, this);\n\n    if (this.config.resolutions) {\n      this.setResolutions(this.config.resolutions, this.psv.config.panorama ? null : this.config.defaultResolution);\n      delete this.config.resolutions;\n      delete this.config.defaultResolution;\n    }\n  }\n\n  /**\n   * @package\n   */\n  destroy() {\n    this.psv.off(CONSTANTS.EVENTS.PANORAMA_LOADED, this);\n\n    this.settings.removeSetting(ResolutionPlugin.id);\n\n    super.destroy();\n  }\n\n  /**\n   * @summary Handles events\n   * @param {Event} e\n   * @private\n   */\n  handleEvent(e) {\n    if (e.type === CONSTANTS.EVENTS.PANORAMA_LOADED) {\n      this.__refreshResolution();\n    }\n  }\n\n  /**\n   * @summary Changes the available resolutions\n   * @param {PSV.plugins.ResolutionPlugin.Resolution[]} resolutions\n   * @param {string} [defaultResolution] - if not provided, the current panorama is kept\n   */\n  setResolutions(resolutions, defaultResolution) {\n    this.resolutions = resolutions;\n    this.resolutionsById = {};\n\n    resolutions.forEach((resolution) => {\n      if (!resolution.id) {\n        throw new PSVError('Missing resolution id');\n      }\n      this.resolutionsById[resolution.id] = resolution;\n    });\n\n    // pick first resolution if no default provided and no current panorama\n    if (!this.psv.config.panorama && !defaultResolution) {\n      defaultResolution = resolutions[0].id;\n    }\n\n    // ensure the default resolution exists\n    if (defaultResolution && !this.resolutionsById[defaultResolution]) {\n      utils.logWarn(`Resolution ${defaultResolution} unknown`);\n      defaultResolution = resolutions[0].id;\n    }\n\n    if (defaultResolution) {\n      this.setResolution(defaultResolution);\n    }\n\n    this.__refreshResolution();\n  }\n\n  /**\n   * @summary Changes the current resolution\n   * @param {string} id\n   * @throws {PSVError} if the resolution does not exist\n   */\n  setResolution(id) {\n    if (!this.resolutionsById[id]) {\n      throw new PSVError(`Resolution ${id} unknown`);\n    }\n\n    return this.__setResolutionIfExists(id);\n  }\n\n  /**\n   * @private\n   * @return {Promise}\n   */\n  __setResolutionIfExists(id) {\n    if (this.resolutionsById[id]) {\n      return this.psv.setPanorama(this.resolutionsById[id].panorama, { transition: false, showLoader: false });\n    }\n    else {\n      return Promise.resolve();\n    }\n  }\n\n  /**\n   * @summary Returns the current resolution\n   * @return {string}\n   */\n  getResolution() {\n    return this.prop.resolution;\n  }\n\n  /**\n   * @summary Updates current resolution on panorama load\n   * @private\n   */\n  __refreshResolution() {\n    const resolution = this.resolutions.find(r => utils.deepEqual(this.psv.config.panorama, r.panorama));\n    if (this.prop.resolution !== resolution?.id) {\n      this.prop.resolution = resolution?.id;\n      this.settings?.updateButton();\n      this.trigger(EVENTS.RESOLUTION_CHANGED, this.prop.resolution);\n    }\n  }\n\n  /**\n   * @summary Returns options for Settings plugin\n   * @return {PSV.plugins.SettingsPlugin.Option[]}\n   * @private\n   */\n  __getSettingsOptions() {\n    return this.resolutions\n      .map(resolution => ({\n        id   : resolution.id,\n        label: resolution.label,\n      }));\n  }\n\n}\n"],"names":["EVENTS","RESOLUTION_CHANGED","DEFAULTS","lang","resolution","ResolutionPlugin","psv","options","settings","resolutions","resolutionsById","prop","config","showBadge","defaultResolution","panorama","utils","logWarn","init","getPlugin","PSVError","addSetting","id","type","label","current","__getSettingsOptions","apply","__setResolutionIfExists","badge","on","CONSTANTS","PANORAMA_LOADED","setResolutions","destroy","off","removeSetting","handleEvent","e","__refreshResolution","forEach","setResolution","setPanorama","transition","showLoader","Promise","resolve","getResolution","find","r","deepEqual","updateButton","trigger","map","AbstractPlugin"],"mappings":"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"}